// This contains all code we needed to manually add to make it work well with cw-orch
// In the future, hopefully some of this can me auto-generated. But let's get it to work now.

// use crate::contract::entry_points::{execute, instantiate, query};
// use crate::contract::sv::mt;

use crate::contract::sv::{ContractExecMsg, ContractQueryMsg, ContractSudoMsg, InstantiateMsg};
use cw_orch::prelude::*;

// Maybe uploadable can be autogenerated?
// But this is fine to include in the client code

#[cfg(any(feature = "mt", test))]
impl<'a> MockContract<Empty> for crate::contract::VaultContract<'a> {
    fn execute(
        &self,
        deps: cosmwasm_std::DepsMut<Empty>,
        env: cosmwasm_std::Env,
        info: cosmwasm_std::MessageInfo,
        msg: Vec<u8>,
    ) -> anyhow::Result<cosmwasm_std::Response<Empty>> {
        sylvia::cw_multi_test::Contract::execute(self, deps, env, info, msg)
    }

    fn instantiate(
        &self,
        deps: cosmwasm_std::DepsMut<Empty>,
        env: cosmwasm_std::Env,
        info: cosmwasm_std::MessageInfo,
        msg: Vec<u8>,
    ) -> anyhow::Result<cosmwasm_std::Response<Empty>> {
        sylvia::cw_multi_test::Contract::instantiate(self, deps, env, info, msg)
    }

    fn query(
        &self,
        deps: cosmwasm_std::Deps<Empty>,
        env: cosmwasm_std::Env,
        msg: Vec<u8>,
    ) -> anyhow::Result<cosmwasm_std::Binary> {
        sylvia::cw_multi_test::Contract::query(self, deps, env, msg)
    }

    fn sudo(
        &self,
        deps: cosmwasm_std::DepsMut<Empty>,
        env: cosmwasm_std::Env,
        msg: Vec<u8>,
    ) -> anyhow::Result<cosmwasm_std::Response<Empty>> {
        sylvia::cw_multi_test::Contract::sudo(self, deps, env, msg)
    }

    fn reply(
        &self,
        deps: cosmwasm_std::DepsMut<Empty>,
        env: cosmwasm_std::Env,
        msg: cosmwasm_std::Reply,
    ) -> anyhow::Result<cosmwasm_std::Response<Empty>> {
        sylvia::cw_multi_test::Contract::reply(self, deps, env, msg)
    }

    fn migrate(
        &self,
        deps: cosmwasm_std::DepsMut<Empty>,
        env: cosmwasm_std::Env,
        msg: Vec<u8>,
    ) -> anyhow::Result<cosmwasm_std::Response<Empty>> {
        sylvia::cw_multi_test::Contract::migrate(self, deps, env, msg)
    }
}

#[cw_orch::interface(InstantiateMsg, ContractExecMsg, ContractQueryMsg, Empty)]
pub struct MeshVault;

impl<Chain> Uploadable for MeshVault<Chain> {
    /// Return the path to the wasm file corresponding to the contract
    fn wasm(_chain: &ChainInfoOwned) -> WasmPath {
        artifacts_dir_from_workspace!()
            .find_wasm_path("mesh_vault")
            .unwrap()
    }

    /// Returns a CosmWasm contract wrapper
    #[cfg(any(feature = "mt", test))]
    fn wrapper() -> Box<dyn MockContract<Empty>> {
        let c = crate::contract::VaultContract::new();
        Box::new(c)
    }

    #[cfg(not(any(feature = "mt", test)))]
    fn wrapper() -> Box<dyn MockContract<Empty>> {
        panic!("Multitest only implemented in tests or with 'mt' feature");
    }
}

// Autogenerating these Froms caused all kinds of rust compiler issues.
// For now, I will just manually implement them to show what could work.
// The following is done in Sylvia, ideally the other (interface) variants could be added there too:
// impl From<ExecMsg> for ContractExecMsg

// Since we know the regular structure here, this may be easy enough to
// generate inside the `sv::messages` macro rather than the `contract` macro, eg.
// #[sv::messages(cw20_marketing as Marketing)]
// #[sv::messages(cw20_minting as Minting)]

use mesh_apis::vault_api::sv::{VaultApiExecMsg, VaultApiQueryMsg, VaultApiSudoMsg};

impl From<VaultApiExecMsg> for ContractExecMsg {
    fn from(msg: VaultApiExecMsg) -> Self {
        ContractExecMsg::VaultApi(msg)
    }
}

impl From<VaultApiQueryMsg> for ContractQueryMsg {
    fn from(msg: VaultApiQueryMsg) -> Self {
        ContractQueryMsg::VaultApi(msg)
    }
}

impl From<VaultApiSudoMsg> for ContractSudoMsg {
    fn from(msg: VaultApiSudoMsg) -> Self {
        ContractSudoMsg::VaultApi(msg)
    }
}
